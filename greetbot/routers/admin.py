from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup
from aiogram_media_group import media_group_handler, MediaGroupFilter
from loguru import logger

from greetbot.services.fsm_states import AddGreeting
from greetbot.services.middlewares.user import UserDBMiddleware
from greetbot.types.greeting import Greeting, MediaFile, MediaDataType
from greetbot.types.extra.file import Base64File
from greetbot.types.settings import settings
from greetbot.types.user import User

router = Router(name="User")
router.message.middleware(UserDBMiddleware(check_admin=True))
router.callback_query.middleware(UserDBMiddleware(check_admin=True))


@router.message(Command("start"))
async def admin_start(message: Message, bot: Bot, user_db: User, state: FSMContext, menu_only: bool = False) -> None:
    await state.set_state()

    if not menu_only:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π.")
        if settings.show_credits:
            await message.answer("<i>bot created by @barabumbum</i>")

    keyboard_buttons: list[list[InlineKeyboardButton]] = [
        [InlineKeyboardButton(text="üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", callback_data="edit_greetings")]
        # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    ]

    if await Greeting.count() != 0:
        keyboard_buttons.append(
            [InlineKeyboardButton(text="üèÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", callback_data="try_greeting")])

    await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons))


@router.callback_query(F.data == "back_to_start")
async def admin_back_to_start(call: CallbackQuery, bot: Bot, user_db: User, state: FSMContext) -> None:
    await call.message.delete()  # type: ignore
    await admin_start(call.message, bot, user_db, state, menu_only=True)


@router.callback_query(F.data == "try_greeting")
async def admin_try_greeting(call: CallbackQuery, bot: Bot, user_db: User, state: FSMContext) -> None:
    await call.message.delete()  # type: ignore

    # TODO: —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ + –∑–∞—â–∏—Ç—É –æ—Ç –æ—à–∏–±–æ–∫
    greetings = await Greeting.find(Greeting.is_enabled == True).to_list()
    for greeting in greetings:
        await greeting.send_as_aiogram_message(bot, user_db.id, call.from_user)

    await admin_start(call.message, bot, user_db, state, menu_only=True)


@router.callback_query(F.data == "edit_greetings")
async def admin_edit_greetings(call: CallbackQuery, bot: Bot, user_db: User) -> None:
    greetings = await Greeting.find(Greeting.is_enabled == True).to_list()
    text = "\n\n".join([f"{index}) {greeting.settings_report}" for index, greeting in enumerate(greetings)])

    text += "\n\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
    text = text.strip()

    keyboard_buttons: list[list[InlineKeyboardButton]] = [
        [InlineKeyboardButton(text=f"üìÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ {index}",
                              callback_data=f"edit_greeting_{greeting.id}")]
        for index, greeting in enumerate(greetings)
    ]

    keyboard_buttons.append([InlineKeyboardButton(text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data=f"add_greeting")])
    keyboard_buttons.append([InlineKeyboardButton(text=f"‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_start")])

    await call.answer()
    await call.message.edit_text(text, parse_mode="HTML",  # type: ignore
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons))  # type: ignore


@router.callback_query(F.data.startswith("edit_greeting_"))
async def admin_edit_greeting(call: CallbackQuery, bot: Bot, user_db: User, state: FSMContext) -> None:
    *_, greeting_id = call.data.split("_")  # type: ignore
    greeting = await Greeting.get(greeting_id)
    if not greeting:
        return

    keyboard_buttons: list[list[InlineKeyboardButton]] = [
        [InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
                              callback_data=f"delete_greeting_{greeting.id}")],
        [InlineKeyboardButton(text=f"‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_start")]
    ]
    await call.message.edit_text('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º?', parse_mode="HTML",  # type: ignore
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons))  # type: ignore


@router.callback_query(F.data.startswith("delete_greeting_"))
async def admin_delete_greeting(call: CallbackQuery, bot: Bot, user_db: User, state: FSMContext) -> None:
    *_, greeting_id = call.data.split("_")  # type: ignore
    greeting = await Greeting.get(greeting_id)
    if not greeting:
        return

    await greeting.delete()

    await call.message.delete()  # type: ignore
    await admin_start(call.message, bot, user_db, state)


@router.callback_query(F.data == "add_greeting")
async def admin_add_greeting(call: CallbackQuery, bot: Bot, user_db: User, state: FSMContext) -> None:
    await state.set_state(AddGreeting.awaiting_caption)
    # TODO: –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é
    buttons: list[list[KeyboardButton]] = [
        [KeyboardButton(text="/no_caption")]
    ]
    await call.message.delete()  # type: ignore
    await call.message.answer(  # type: ignore
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
        f"\n<i><code>/no_caption</code> —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç–∞ –Ω–µ –±—ã–ª–æ</i>",
        reply_markup=ReplyKeyboardMarkup(keyboard=buttons, one_time_keyboard=True)
    )


@router.message(AddGreeting.awaiting_caption)
async def admin_add_greeting_name(message: Message, bot: Bot, user_db: User, state: FSMContext) -> None:
    if any((
            not message.text,
            message.caption is not None,
            message.photo is not None,
            message.video is not None,
            message.document is not None
    )):
        await message.delete()
        await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
        return

    buttons: list[list[KeyboardButton]] = [
        [KeyboardButton(text="/no_media")]
    ]

    await message.answer(
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –≤–∏–¥–µ–æ <b>–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>"
        f"\n<i>—Ç–µ–∫—Å—Ç, –∞—É–¥–∏–æ –∏ –≤—Å—ë, –∫—Ä–æ–º–µ –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</i>"
        f"\n<i><code>/no_media</code> –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–µ–¥–∏–∞ –Ω–µ –±—ã–ª–æ</i>",
        reply_markup=ReplyKeyboardMarkup(keyboard=buttons, one_time_keyboard=True)
    )
    data = {
        "caption": message.html_text if not message.text.startswith("/no_caption") else None  # type: ignore
    }
    await state.set_state(AddGreeting.awaiting_media)
    await state.set_data(data)


@router.message(AddGreeting.awaiting_media, (~F.text & F.media_group_id))
@media_group_handler
async def admin_add_greeting_media(messages: list[Message], bot: Bot, user_db: User, state: FSMContext) -> None:
    logger.info("Caught a media group")
    media_files: list[MediaFile] = []
    for message in messages:
        if message.photo is not None:
            data = await bot.download(message.photo[-1].file_id)
            data_bytes = data.read()  # type: ignore
            media_files.append(MediaFile(data_type=MediaDataType.IMAGE, base64=Base64File.from_bytes(data_bytes)))
        elif message.video is not None:
            data = await bot.download(message.video.file_id)
            data_bytes = data.read()  # type: ignore
            media_files.append(MediaFile(data_type=MediaDataType.VIDEO, base64=Base64File.from_bytes(data_bytes)))
        elif message.document is not None:
            data = await bot.download(message.document.file_id)
            data_bytes = data.read()  # type: ignore
            media_files.append(MediaFile(data_type=MediaDataType.DOCUMENT, base64=Base64File.from_bytes(data_bytes), file_name=message.document.file_name or "file.txt"))

    state_data = await state.get_data()
    logger.debug(state_data)
    if state_data.get("caption", None) is None and len(media_files) == 0:
        await messages[-1].answer(f"–ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç—É —Ç–µ–∫—Å—Ç–∞, —Ç–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç")
        return

    greeting = Greeting(caption=state_data.get("caption", None), media_files=media_files)

    await messages[-1].answer(f"–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –≤–∞—à–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:")
    await greeting.send_as_aiogram_message(bot, messages[-1].chat.id, messages[-1].from_user)

    state_data = {"greeting": greeting}
    await state.set_data(state_data)

    keyboard_buttons: list[list[InlineKeyboardButton]] = [
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_greeting")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_greeting")]
    ]
    await messages[-1].answer(f"<b>–ö–∞–∫ –≤–∞–º?</b>", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons))
    await state.set_state()


@router.message(AddGreeting.awaiting_media)
async def admin_add_greeting_media_not_media_group(message: Message, bot: Bot, user_db: User, state: FSMContext) -> None:
    logger.info("Caught a single message")
    if message.text is not None:
        if not message.text.startswith("/no_media"):
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç!")
            return
        logger.info("Caught a /no_media")

    media_files = []
    if message.text is not None and message.text.startswith("/no_media"):
        pass
    elif message.text is None:
        photo = None
        if message.photo is not None:
            photo = message.photo[-1]

        media = photo or message.video or message.document
        if not media and not message.text.startswith("/no_media"):  # type: ignore
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç!")
            return

        if photo:
            media_type = MediaDataType.IMAGE
        elif message.document:
            media_type = MediaDataType.DOCUMENT
        else:
            media_type = MediaDataType.VIDEO

        data = await bot.download(media.file_id)  # type: ignore
        data_bytes = data.read()  # type: ignore
        media_file = MediaFile(data_type=media_type, base64=Base64File.from_bytes(data_bytes))

        if message.document:
            media_file.file_name = message.document.file_name or "file.txt"

        media_files.append(media_file)

    state_data = await state.get_data()
    logger.debug(state_data)
    if state_data.get("caption", None) is None and len(media_files) == 0:
        await message.answer(f"–ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç—É —Ç–µ–∫—Å—Ç–∞, —Ç–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç")
        return

    greeting = Greeting(caption=state_data.get("caption", None), media_files=media_files)

    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –≤–∞—à–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:")
    await greeting.send_as_aiogram_message(bot, message.chat.id, message.from_user)

    state_data = {"greeting": greeting}
    await state.set_data(state_data)

    keyboard_buttons: list[list[InlineKeyboardButton]] = [
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_greeting")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_greeting")]
    ]
    await message.answer(f"<b>–ö–∞–∫ –≤–∞–º?</b>",
                              reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons))
    await state.set_state()
    return



@router.callback_query(F.data == "save_greeting")
async def admin_save_greeting(call: CallbackQuery, bot: Bot, user_db: User, state: FSMContext) -> None:
    state_data = await state.get_data()
    if (greeting := state_data.get("greeting", None)) is not None:
        await greeting.insert()

    await call.message.delete()  # type: ignore
    await admin_start(call.message, bot, user_db, state, menu_only=True)
